unlink('Market Segmentation_cache', recursive = TRUE)
install.packages("TeX")
install.packages("texi2dvi")
install.packages("pdflatex")
Sys.getenv("PATH")
optimalModel = LICORS::kmeanspp(tempDf, (which.max(withoutChatter)+1),nstart = 10)
par(bg = "gray")
plot(2:10,withoutChatter,main = "K selections versus CH Score",xlab = "K",ylab = "CH Score",type = "l",col = "red")
df = read.csv("social_marketing.csv")
head(df)
df$X = NULL
for (row in 1:nrow(df)){
sum = rowSums(df[row,])
for(col in 1:ncol(df)){
df[row,col] = df[row,col]/sum
}
}
head(df)
#set up parralel computing
library(foreach)
library(doParallel)
library(LICORS)
library(clusterCrit)
registerDoParallel(cores = 4)
##register parralel backend
clusterTweeters = function(numK,df){
model = LICORS::kmeanspp(df, k = numK,nstart = 10)
#find ch value for the model
clusterCrit::intCriteria(as.matrix(df),model$cluster,"Calinski_Harabasz")
}
tempDf = df
#drop chatter
tempDf$chatter= NULL
withoutChatter = foreach(k = 2:10,.combine = 'c')%dopar%
{
clusterTweeters(k,tempDf)
}
par(bg = "gray")
plot(2:10,withoutChatter,main = "K selections versus CH Score",xlab = "K",ylab = "CH Score",type = "l",col = "red")
abline(v = (which.max(withoutChatter)+1),col = "blue",lw = 2)
optimalModel = LICORS::kmeanspp(tempDf, (which.max(withoutChatter)+1),nstart = 10)
#plot parameters for each model
topN = 7
centriodMat = matrix(NA,2,topN)
par(bg = "gray",mfrow = c(2,1))
for (k in 1:2)
{
sorted = sort(optimalModel$centers[k,],decreasing = TRUE)[1:topN]
barplot(sorted,ylim = c(0,.23),col = "blue",main = paste("Figure",k,":"))
centriodMat[k,] = names(sorted)
}
print(paste("Top Most important centriod indicators per cluster: "))
print(centriodMat)
length(which(optimalModel$cluster == 1))/length(optimalModel$cluster)
length(which(optimalModel$cluster == 2))/length(optimalModel$cluster)
df = read.csv("social_marketing.csv")
head(df)
df$X = NULL
df = data.frame(as.matrix(df)/rowSums(as.matrix(df)))
head(df)
#set up parralel computing
library(foreach)
library(doParallel)
library(LICORS)
library(clusterCrit)
registerDoParallel(cores = 4)
##register parralel backend
clusterTweeters = function(numK,df){
model = LICORS::kmeanspp(df, k = numK,nstart = 10)
#find ch value for the model
clusterCrit::intCriteria(as.matrix(df),model$cluster,"Calinski_Harabasz")
}
tempDf = df
#drop chatter
tempDf$chatter= NULL
withoutChatter = foreach(k = 2:10,.combine = 'c')%dopar%
{
clusterTweeters(k,tempDf)
}
##register parralel backend
clusterTweeters = function(numK,df){
model = LICORS::kmeanspp(as.matrix(df), k = numK,nstart = 10)
#find ch value for the model
clusterCrit::intCriteria(as.matrix(df),model$cluster,"Calinski_Harabasz")
}
tempDf = df
#drop chatter
tempDf$chatter= NULL
withoutChatter = foreach(k = 2:10,.combine = 'c')%dopar%
{
clusterTweeters(k,tempDf)
}
withoutChatter
par(bg = "gray")
plot(2:10,withoutChatter,main = "K selections versus CH Score",xlab = "K",ylab = "CH Score",type = "l",col = "red")
abline(v = (which.max(withoutChatter)+1),col = "blue",lw = 2)
optimalModel = LICORS::kmeanspp(tempDf, (which.max(withoutChatter)+1),nstart = 10)
#plot parameters for each model
topN = 7
centriodMat = matrix(NA,2,topN)
par(bg = "gray",mfrow = c(2,1))
for (k in 1:2)
{
sorted = sort(optimalModel$centers[k,],decreasing = TRUE)[1:topN]
barplot(sorted,ylim = c(0,.23),col = "blue",main = paste("Figure",k,":"))
centriodMat[k,] = names(sorted)
}
print(paste("Top",topN,"important centriod indicators per cluster: "))
print(centriodMat)
length(which(optimalModel$cluster == 1))/length(optimalModel$cluster)
length(which(optimalModel$cluster == 2))/length(optimalModel$cluster)
optimalModel$tot.withinss
elbowKmeans = function(numK , df){
elbowModel = LICORS::kmeanspp(df,k = numK,nstart = 10)
elbowModel$tot.withinss
}
wVec = foreach(k = 2:10,.combine = 'c') %dopar%
{
elbowKmeans(2,tempDf)
}
par(bg = "gray")
plot(2:10,wVec,col = "red",main = "Fit vs. K")
wVec
elbowKmeans = function(numK , df){
elbowModel = LICORS::kmeanspp(df,k = numK,nstart = 10)
elbowModel$tot.withinss
}
wVec = foreach(k = 2:10,.combine = 'c') %dopar%
{
elbowKmeans(k,tempDf)
}
par(bg = "gray")
plot(2:10,wVec,col = "red",main = "Fit vs. K")
par(bg = "gray")
plot(2:10,wVec,col = "red",main = "Fit vs. K")
plot(2:10,wVec,col = "red",main = "Fit vs. K",type = "l")
clusterTweeters = function(numK,df){
model = LICORS::kmeanspp(as.matrix(df), k = numK,nstart = 10)
#find ch value for the model
clusterCrit::intCriteria(as.matrix(df),model$cluster,"Calinski_Harabasz")
}
tempDf = df
#drop chatter
tempDf$chatter= NULL
withoutChatter = foreach(k = 1:15,.combine = 'c')%dopar%
{
clusterTweeters(k,tempDf)
}
par(bg = "gray")
plot(1:15,withoutChatter,main = "K selections versus CH Score",xlab = "K",ylab = "CH Score",type = "l",col = "red")
abline(v = (which.max(withoutChatter)+1),col = "blue",lw = 2)
withoutChatter
elbowKmeans = function(numK , df){
elbowModel = LICORS::kmeanspp(df,k = numK,nstart = 10)
elbowModel$tot.withinss
}
wVec = foreach(k = 1:10,.combine = 'c') %dopar%
{
elbowKmeans(k,tempDf)
}
elbowKmeans = function(numK , df){
elbowModel = LICORS::kmeanspp(df,k = numK,nstart = 10)
elbowModel$tot.withinss
}
wVec = foreach(k = 1:15,.combine = 'c') %dopar%
{
elbowKmeans(k,tempDf)
}
elbowKmeans = function(numK , df){
elbowModel = LICORS::kmeanspp(df,k = numK,nstart = 10)
elbowModel$tot.withinss
}
wVec = foreach(k = 1:15,.combine = 'c') %dopar%
{
elbowKmeans(k,tempDf)
}
par(bg = "gray")
plot(1:15,wVec,col = "red",main = "Fit vs. K",type = "l")
wVec
length(wVec)
par(bg = "gray")
plot(2:15,wVec,col = "red",main = "Fit vs. K",type = "l")
par(bg = "gray")
plot(1:14,wVec,col = "red",main = "Fit vs. K",type = "l")
#set up parallel computing
library(foreach)
library(doParallel)
library(LICORS)
library(clusterCrit)
##register parralel backend
registerDoParallel(cores = 4)
as.matrix(df)
elbowKmeans = function(numK , df){
elbowModel = LICORS::kmeanspp(as.matrix(df),k = numK,nstart = 10)
elbowModel$tot.withinss
}
wVec = foreach(k = 1:15,.combine = 'c') %dopar%
{
elbowKmeans(k,tempDf)
}
clusterTweeters = function(numK,df){
model = LICORS::kmeanspp(as.matrix(df), k = numK,nstart = 10)
#find ch value for the model
c(clusterCrit::intCriteria(as.matrix(df),model$cluster,"Calinski_Harabasz"),model$tot.withinss)
}
withoutChatter = foreach(k = 1:15,.combine = 'rbind')%dopar%
{
clusterTweeters(k,tempDf)
}
clusterTweeters = function(numK,df){
model = LICORS::kmeanspp(as.matrix(df), k = numK,nstart = 10)
#find ch value for the model
c(clusterCrit::intCriteria(as.matrix(df),model$cluster,"Calinski_Harabasz"),model$tot.withinss)
}
withoutChatter = foreach(k = 1:15,.combine = 'rbind')%dopar%
{
clusterTweeters(k,tempDf)
}
withoutChatter
dim(withoutChatter)
clusterTweeters = function(numK,df){
model = LICORS::kmeanspp(as.matrix(df), k = numK,nstart = 10)
#find ch value for the model
c(clusterCrit::intCriteria(as.matrix(df),model$cluster,"Calinski_Harabasz"),model$tot.withinss)
}
withoutChatter = foreach(k = 1:15,.combine = 'rbind')%dopar%
{
clusterTweeters(k,tempDf)
}
clusterTweeters = function(numK,df){
model = LICORS::kmeanspp(as.matrix(df), k = numK,nstart = 10)
#find ch value for the model
c(clusterCrit::intCriteria(as.matrix(df),model$cluster,"Calinski_Harabasz"),model$tot.withinss)
}
withoutChatter = foreach(k = 1:15,.combine = 'rbind')%dopar%
{
clusterTweeters(k,tempDf)
}
colnames(withoutChatter) = c('CH Score','Fit')
par(bg = "gray")
plot(rownames(withoutChatter),withoutChatter[,2],col = "red",main = "Fit vs. K",type = "l")
row.names(withoutChatter)
par(bg = "gray")
plot(row.names(withoutChatter),withoutChatter[,2],col = "red",main = "Fit vs. K",type = "l")
par(bg = "gray")
plot(1:nrow(withoutChatter),withoutChatter[,2],col = "red",main = "Fit vs. K",type = "l")
par(bg = "gray")
plot(1:nrow(withoutChatter),withoutChatter[,2],col = "red",main = "Fit vs. K",type = "l",xlab = "K",ylab = "SSE (tot)")
par(bg = "gray")
plot(rownames(withoutChatter),withoutChatter[,1],main = "K selections versus CH Score",xlab = "K",ylab = "CH Score",type = "l",col = "red")
par(bg = "gray")
plot(1:nrow(withoutChatter),withoutChatter[,1],main = "K selections versus CH Score",xlab = "K",ylab = "CH Score",type = "l",col = "red")
abline(v = (which.max(withoutChatter)+1),col = "blue",lw = 2)
optimalModel = LICORS::kmeanspp(tempDf, (which.max(withoutChatter)+1),nstart = 10)
#plot parameters for each model
topN = 7
centriodMat = matrix(NA,2,topN)
par(bg = "gray",mfrow = c(2,1))
for (k in 1:2)
{
sorted = sort(optimalModel$centers[k,],decreasing = TRUE)[1:topN]
barplot(sorted,ylim = c(0,.23),col = "blue",main = paste("Figure",k,":"))
centriodMat[k,] = names(sorted)
}
print(paste("Top",topN,"important centriod indicators per cluster: "))
print(centriodMat)
optimalModel = LICORS::kmeanspp(tempDf, (which.max(withoutChatter)+1),nstart = 10)
#plot parameters for each model
topN = 5
centriodMat = matrix(NA,2,topN)
par(bg = "gray",mfrow = c(2,1))
for (k in 1:2)
{
sorted = sort(optimalModel$centers[k,],decreasing = TRUE)[1:topN]
barplot(sorted,ylim = c(0,.23),col = "blue",main = paste("Figure",k,":"))
centriodMat[k,] = names(sorted)
}
print(paste("Top",topN,"important centriod indicators per cluster: "))
print(centriodMat)
length(which(optimalModel$cluster == 1))/length(optimalModel$cluster)
length(which(optimalModel$cluster == 2))/length(optimalModel$cluster)
